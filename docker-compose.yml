# ===================================
# Code Keeper Bot - Docker Compose
# בוט שומר קבצי קוד - הרכב מלא
# ===================================

version: '3.8'

services:
  # ===================================
  # MongoDB Database
  # ===================================
  mongodb:
    image: mongo:6.0
    container_name: code-keeper-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-password123}
      MONGO_INITDB_DATABASE: ${DATABASE_NAME:-code_keeper_bot}
    ports:
      - "${MONGO_PORT:-27017}:27017"
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./docker/mongodb/init-scripts:/docker-entrypoint-initdb.d:ro
    networks:
      - code-keeper-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: mongod --auth

  # ===================================
  # Redis Cache (אופציונלי)
  # ===================================
  redis:
    image: redis:7-alpine
    container_name: code-keeper-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - code-keeper-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123}

  # ===================================
  # Code Keeper Bot - Production
  # ===================================
  code-keeper-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: code-keeper-bot
    restart: unless-stopped
    environment:
      # Bot settings
      BOT_TOKEN: ${BOT_TOKEN}
      # Enable internal share web + base URL for public links
      ENABLE_INTERNAL_SHARE_WEB: ${ENABLE_INTERNAL_SHARE_WEB:-true}
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL:-http://localhost:${BOT_PORT:-8000}}
      
      # Database
      MONGODB_URL: mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD:-password123}@mongodb:27017/${DATABASE_NAME:-code_keeper_bot}?authSource=admin
      DATABASE_NAME: ${DATABASE_NAME:-code_keeper_bot}
      
      # Cache
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis123}@redis:6379/0
      CACHE_TTL: ${CACHE_TTL:-300}
      
      # External integrations
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      PASTEBIN_API_KEY: ${PASTEBIN_API_KEY}
      
      # Performance
      MAX_CODE_SIZE: ${MAX_CODE_SIZE:-100000}
      MAX_FILES_PER_USER: ${MAX_FILES_PER_USER:-1000}
      
      # Appearance
      HIGHLIGHT_THEME: ${HIGHLIGHT_THEME:-github-dark}
      
      # Security
      ADMIN_USER_IDS: ${ADMIN_USER_IDS}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      LOG_FILE: /app/logs/bot.log
      
      # Server (for webhooks)
      PORT: 8000
      WEBHOOK_URL: ${WEBHOOK_URL}
      WEBHOOK_SECRET: ${WEBHOOK_SECRET}
      
      # Backup
      AUTO_BACKUP_ENABLED: ${AUTO_BACKUP_ENABLED:-true}
      BACKUP_FREQUENCY_HOURS: ${BACKUP_FREQUENCY_HOURS:-24}
      MAX_BACKUPS_TO_KEEP: ${MAX_BACKUPS_TO_KEEP:-7}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      ENABLE_METRICS: ${ENABLE_METRICS:-false}
    
    ports:
      - "${BOT_PORT:-8000}:8000"
    
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
      - ./temp:/app/temp
      - bot_data:/app/data
    
    networks:
      - code-keeper-network
    
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    healthcheck:
      test: ["CMD", "python", "-c", "from config import config; print('OK')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ===================================
  # Code Keeper Bot - Development
  # ===================================
  code-keeper-bot-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: code-keeper-bot-dev
    restart: unless-stopped
    environment:
      BOT_TOKEN: ${BOT_TOKEN}
      MONGODB_URL: mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD:-password123}@mongodb:27017/${DATABASE_NAME:-code_keeper_bot}_dev?authSource=admin
      DATABASE_NAME: ${DATABASE_NAME:-code_keeper_bot}_dev
      DEBUG: true
      LOG_LEVEL: DEBUG
      GITHUB_TOKEN: ${GITHUB_TOKEN}
      PASTEBIN_API_KEY: ${PASTEBIN_API_KEY}
    ports:
      - "${BOT_DEV_PORT:-8001}:8000"
    volumes:
      - .:/app
      - ./logs:/app/logs
      - ./backups:/app/backups
      - bot_dev_data:/app/data
    networks:
      - code-keeper-network
    depends_on:
      mongodb:
        condition: service_healthy
    profiles:
      - development
    command: python main.py

  # ===================================
  # MongoDB Express (אופציונלי)
  # ===================================
  mongo-express:
    image: mongo-express:latest
    container_name: code-keeper-mongo-express
    restart: unless-stopped
    ports:
      - "${MONGO_EXPRESS_PORT:-8081}:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USERNAME:-admin}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${MONGO_PASSWORD:-password123}
      ME_CONFIG_MONGODB_URL: mongodb://${MONGO_USERNAME:-admin}:${MONGO_PASSWORD:-password123}@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER:-admin}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASS:-admin123}
    depends_on:
      - mongodb
    networks:
      - code-keeper-network
    profiles:
      - monitoring

  # ===================================
  # Nginx Reverse Proxy (אופציונלי)
  # ===================================
  nginx:
    image: nginx:alpine
    container_name: code-keeper-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - code-keeper-bot
    networks:
      - code-keeper-network
    profiles:
      - production

  # ===================================
  # Prometheus Monitoring (אופציונלי)
  # ===================================
  prometheus:
    image: prom/prometheus:latest
    container_name: code-keeper-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - code-keeper-network
    profiles:
      - monitoring

  # ===================================
  # Grafana Dashboard (אופציונלי)
  # ===================================
  grafana:
    image: grafana/grafana:latest
    container_name: code-keeper-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASS:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - code-keeper-network
    profiles:
      - monitoring

# ===================================
# Networks
# ===================================
networks:
  code-keeper-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ===================================
# Volumes
# ===================================
volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
  redis_data:
    driver: local
  bot_data:
    driver: local
  bot_dev_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# ===================================
# Scripts שימושיים
# ===================================

# הפעלה בסיסית:
# docker-compose up code-keeper-bot mongodb

# הפעלה עם Redis:
# docker-compose up code-keeper-bot mongodb redis

# הפעלה עם ניטור:
# docker-compose --profile monitoring up

# פיתוח:
# docker-compose --profile development up code-keeper-bot-dev mongodb

# ייצור מלא:
# docker-compose --profile production --profile monitoring up

# עצירה:
# docker-compose down

# עצירה עם מחיקת volumes:
# docker-compose down -v

# לוגים:
# docker-compose logs -f code-keeper-bot

# שחזור מגיבוי:
# docker-compose exec code-keeper-bot python -c "
# from backup_manager import backup_manager
# print(backup_manager.list_backups(user_id))
# "

# בדיקת תקינות:
# docker-compose exec code-keeper-bot python -c "
# from database import db
# print('MongoDB:', 'Connected' if db.client else 'Disconnected')
# from utils import get_memory_usage
# print('Memory:', get_memory_usage())
# "
