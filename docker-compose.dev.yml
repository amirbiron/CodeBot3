# ===================================
# Code Keeper Bot - Development Docker Compose
# בוט שומר קבצי קוד - פיתוח מקומי
# ===================================

# קובץ זה מיועד לפיתוח מקומי בלבד
# לייצור השתמש ב-Render.com (ראו render.yaml)

version: '3.8'

services:
  # ===================================
  # MongoDB for Local Development
  # ===================================
  mongodb-dev:
    image: mongo:6.0
    container_name: code-keeper-mongodb-dev
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: devuser
      MONGO_INITDB_ROOT_PASSWORD: devpass123
      MONGO_INITDB_DATABASE: code_keeper_dev
    ports:
      - "27017:27017"
    volumes:
      - mongodb_dev_data:/data/db
      - mongodb_dev_config:/data/configdb
    networks:
      - dev-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ===================================
  # Redis for Local Development
  # ===================================
  redis-dev:
    image: redis:7-alpine
    container_name: code-keeper-redis-dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - dev-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================================
  # Code Keeper Bot - Development
  # ===================================
  code-keeper-bot-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: code-keeper-bot-dev
    restart: unless-stopped
    environment:
      # Bot settings
      BOT_TOKEN: ${BOT_TOKEN}
      
      # Database (local MongoDB)
      MONGODB_URL: mongodb://devuser:devpass123@mongodb-dev:27017/code_keeper_dev?authSource=admin
      DATABASE_NAME: code_keeper_dev
      
      # Cache (local Redis)
      REDIS_URL: redis://redis-dev:6379/0
      CACHE_TTL: 60  # קצר יותר לפיתוח
      
      # External integrations
      GITHUB_TOKEN: ${GITHUB_TOKEN:-}
      PASTEBIN_API_KEY: ${PASTEBIN_API_KEY:-}
      
      # Development settings
      DEBUG: true
      LOG_LEVEL: DEBUG
      DEVELOPMENT: true
      
      # Performance (מותאם לפיתוח)
      MAX_CODE_SIZE: 50000
      MAX_FILES_PER_USER: 100
      
      # Appearance
      HIGHLIGHT_THEME: github-dark
      # Internal share web (dev)
      ENABLE_INTERNAL_SHARE_WEB: ${ENABLE_INTERNAL_SHARE_WEB:-true}
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL:-http://localhost:8000}
      
      # Backup (מבוטל לפיתוח)
      AUTO_BACKUP_ENABLED: false
    
    ports:
      - "8000:8000"
    
    volumes:
      # Mount source code for live editing
      - .:/app
      - ./logs:/app/logs
      - ./backups:/app/backups
      - ./temp:/app/temp
      - dev_data:/app/data
    
    networks:
      - dev-network
    
    depends_on:
      mongodb-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    
    # Development command
    command: |
      sh -c "
        echo '🚀 Starting Code Keeper Bot in Development Mode...'
        echo '📝 Environment: Development'
        echo '🗄️ Database: Local MongoDB'
        echo '⚡ Cache: Local Redis'
        echo '🔧 Hot reload: Enabled'
        echo
        python main.py
      "

  # ===================================
  # MongoDB Express (Database UI)
  # ===================================
  mongo-express-dev:
    image: mongo-express:latest
    container_name: code-keeper-mongo-express-dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: devuser
      ME_CONFIG_MONGODB_ADMINPASSWORD: devpass123
      ME_CONFIG_MONGODB_URL: mongodb://devuser:devpass123@mongodb-dev:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin
    depends_on:
      - mongodb-dev
    networks:
      - dev-network

# ===================================
# Networks
# ===================================
networks:
  dev-network:
    driver: bridge

# ===================================
# Volumes
# ===================================
volumes:
  mongodb_dev_data:
    driver: local
  mongodb_dev_config:
    driver: local
  redis_dev_data:
    driver: local
  dev_data:
    driver: local

# ===================================
# Development Commands
# ===================================

# הפעלה מהירה:
# docker-compose -f docker-compose.dev.yml up

# הפעלה ברקע:
# docker-compose -f docker-compose.dev.yml up -d

# צפייה בלוגים:
# docker-compose -f docker-compose.dev.yml logs -f code-keeper-bot-dev

# עצירה:
# docker-compose -f docker-compose.dev.yml down

# עצירה עם מחיקת volumes:
# docker-compose -f docker-compose.dev.yml down -v

# גישה לקונטיינר:
# docker-compose -f docker-compose.dev.yml exec code-keeper-bot-dev bash

# הפעלת tests:
# docker-compose -f docker-compose.dev.yml exec code-keeper-bot-dev python -m pytest

# בדיקת מסד נתונים:
# http://localhost:8081 (mongo-express)
# User: admin, Password: admin

# ===================================
# Development Environment Setup
# ===================================

# 1. העתק .env.example ל-.env.dev
# cp .env.example .env.dev

# 2. ערוך .env.dev עם הגדרות פיתוח:
# BOT_TOKEN=your_development_bot_token
# GITHUB_TOKEN=your_github_token (אופציונלי)
# PASTEBIN_API_KEY=your_pastebin_key (אופציונלי)

# 3. הפעל את הסביבה:
# docker-compose -f docker-compose.dev.yml --env-file .env.dev up

# ===================================
# Development Tips
# ===================================

# Hot Reload:
# השתמש ב-watchdog כדי שהבוט יתחיל מחדש על שינויים:
# pip install watchdog
# watchmedo auto-restart --directory=. --pattern="*.py" --recursive -- python main.py

# Database Reset:
# למחיקת הDB ויצירתו מחדש:
# docker-compose -f docker-compose.dev.yml down -v
# docker-compose -f docker-compose.dev.yml up

# Performance Monitoring:
# docker stats code-keeper-bot-dev

# Memory Usage:
# docker-compose -f docker-compose.dev.yml exec code-keeper-bot-dev python -c "
# from utils import get_memory_usage
# print('Memory Usage:', get_memory_usage())
# "
