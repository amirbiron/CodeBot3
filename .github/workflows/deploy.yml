# ===================================
# Code Keeper Bot - CI/CD Pipeline
# בוט שומר קבצי קוד - פייפליין אוטומטי
# ===================================

name: 🚀 Code Keeper Bot CI/CD

on:
  # הפעלה על push לענפים עיקריים בלבד (לא PR)
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]

  # הפעלה ידנית
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# משתני סביבה גלובליים
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# הרשאות GITHUB_TOKEN
permissions:
  contents: read
  packages: write
  security-events: write
  issues: write
  pull-requests: write

jobs:
  # ===================================
  # שלב 1: בדיקות קוד
  # ===================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel poetry-core
          pip install -r requirements.txt
          pip install flake8 black isort mypy bandit safety pytest pytest-asyncio pytest-cov
      
      - name: 🔎 Dependency integrity (pip check)
        run: |
          pip check

      - name: 🧪 Smoke compile (exclude .restore)
        run: |
          find . -type f -name "*.py" -not -path "./.restore/*" -print0 | xargs -0 -n1 -P 4 python -m py_compile
      
      - name: 🎨 Code Formatting (Black)
        run: |
          black --check --diff .
        continue-on-error: true
      
      - name: 📋 Import Sorting (isort)
        run: |
          isort --check-only --diff .
        continue-on-error: true
      
      - name: 🔍 Linting (Flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: 🏷️ Type Checking (MyPy)
        run: |
          mypy . --ignore-missing-imports
        continue-on-error: true
      
      - name: 🔒 Security Check (Bandit)
        run: |
          bandit -r . -f json -o bandit-report.json
        continue-on-error: true
      
      - name: 🛡️ Dependency Check (Safety)
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true
      
      - name: 📊 Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # ===================================
  # שלב 2: בדיקות יחידה
  # ===================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test123
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel poetry-core
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock

      - name: 🔎 Dependency integrity (pip check)
        run: |
          pip check

        
      - name: 🧪 Smoke compile (exclude .restore)
        run: |
          find . -type f -name "*.py" -not -path "./.restore/*" -print0 | xargs -0 -n1 -P 4 python -m py_compile
      
      - name: 🧪 Run Tests
        env:
          BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN || '1234567890:TEST_TOKEN_FOR_TESTING' }}
          MONGODB_URL: mongodb://test:test123@localhost:27017/test_db?authSource=admin
          REDIS_URL: redis://localhost:6379/0
          GITHUB_TOKEN: ${{ secrets.TEST_GITHUB_TOKEN }}
          PASTEBIN_API_KEY: ${{ secrets.TEST_PASTEBIN_KEY }}
        run: |
          pytest -v --cov=. --cov-report=xml --cov-report=html
      
      # Coverage upload מבוצע כבר ב-CI הראשי. כדי למנוע כפילויות/בלבול, ננטרל כאן.
      - name: 📊 Upload Coverage to Codecov (disabled - handled in CI workflow)
        if: false
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: 📈 Upload Coverage Reports
        uses: actions/upload-artifact@v4
        if: matrix.python-version == '3.11'
        with:
          name: coverage-reports
          path: htmlcov/

  # Aggregator to expose a single required status for all matrix runs
  unit-tests-gate:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    if: github.event_name == 'pull_request'
    steps:
      - name: All unit test matrix runs succeeded
        run: echo "All unit test matrix runs succeeded"

  # ===================================
  # שלב 3: בניית Docker Images
  # ===================================
  build-docker:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    timeout-minutes: 45
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🧭 Determine build plan (platforms & push)
        id: plan
        run: |
          set -euo pipefail
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "platforms=linux/amd64,linux/arm64" >> "$GITHUB_OUTPUT"
            echo "do_push=true" >> "$GITHUB_OUTPUT"
          elif [[ "${GITHUB_EVENT_NAME}" == "push" && ( "${GITHUB_REF}" == "refs/heads/main" || "${GITHUB_REF}" == "refs/heads/develop" ) ]]; then
            echo "platforms=linux/amd64" >> "$GITHUB_OUTPUT"
            echo "do_push=true" >> "$GITHUB_OUTPUT"
          else
            echo "platforms=linux/amd64" >> "$GITHUB_OUTPUT"
            echo "do_push=false" >> "$GITHUB_OUTPUT"
          fi
      
      - name: 🐧 Set up QEMU (for ARM emulation)
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to Container Registry
        if: ${{ steps.plan.outputs.do_push == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Avoid generating tags with empty names
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🏗️ Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ steps.plan.outputs.platforms }}
          push: ${{ steps.plan.outputs.do_push == 'true' }}
          load: ${{ steps.plan.outputs.do_push != 'true' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production
      
      - name: ⏳ Wait for image to be available in registry
        if: ${{ steps.plan.outputs.do_push == 'true' }}
        run: sleep 15
      
      - name: 🛡️ Run Security Scan
        if: ${{ steps.plan.outputs.do_push == 'true' }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build.outputs.digest }}
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Check if SARIF exists
        id: has_trivy_sarif
        run: |
          if [ -f trivy-results.sarif ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: 📊 Upload Security Scan Results
        if: steps.has_trivy_sarif.outputs.exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # שלב 3.5: (בוטל) — השתמש ישירות בבדיקות Code Quality & Security ו‑Unit Tests

  # ===================================
  # שלב 4: פריסה ל-Render Staging
  # ===================================
  deploy-staging:
    name: 🚀 Deploy to Render Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    
    environment:
      name: staging
      url: https://code-keeper-bot-staging.onrender.com
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🚀 Trigger Render Deploy (Staging)
        run: |
          curl -X POST "${{ secrets.RENDER_STAGING_DEPLOY_HOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "branch": "develop",
              "commit": "${{ github.sha }}"
            }'
      
      - name: ⏳ Wait for Deployment
        run: |
          echo "⏳ Waiting for Render deployment to complete..."
          sleep 120  # ממתין 2 דקות לפריסה
      
      - name: 🧪 Health Check
        run: |
          echo "🏥 Checking staging health..."
          for i in {1..10}; do
            if curl -f "https://code-keeper-bot-staging.onrender.com/health" 2>/dev/null; then
              echo "✅ Staging is healthy!"
              exit 0
            fi
            echo "⏳ Attempt $i/10 failed, waiting 30s..."
            sleep 30
          done
          echo "❌ Staging health check failed"
          exit 1
      
      - name: 🧪 Integration Tests
        run: |
          echo "🧪 Running integration tests against staging..."
          # כאן נוסיף בדיקות אינטגרציה ספציפיות
          python -c "
          import requests
          import os
          
          # בדיקה שהבוט מגיב
          staging_url = 'https://code-keeper-bot-staging.onrender.com'
          
          try:
              response = requests.get(f'{staging_url}/health', timeout=10)
              assert response.status_code == 200
              print('✅ Staging API is responding')
              
              # בדיקות נוספות כאן...
              
          except Exception as e:
              print(f'❌ Integration test failed: {e}')
              exit(1)
          "

  # ===================================
  # שלב 5: פריסה ל-Render Production
  # ===================================
  deploy-production:
    name: 🏭 Deploy to Render Production
    runs-on: ubuntu-latest
    needs: [build-docker, deploy-staging]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    
    environment:
      name: production
      url: https://code-keeper-bot.onrender.com
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🎯 Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 Code Keeper Bot ${{ github.ref_name }}
            
            ### ✨ New Features
            - Feature 1
            - Feature 2
            
            ### 🐛 Bug Fixes
            - Fix 1
            - Fix 2
            
            ### 📦 Docker Image
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ### 🌐 Live on Render
            The bot is deployed and running at: https://code-keeper-bot.onrender.com
            
            ### 🔗 Full Changelog
            https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.ref_name }}
          draft: false
          prerelease: false
      
      - name: 🚀 Trigger Render Deploy (Production)
        run: |
          echo "🚀 Deploying to Render Production..."
          
          # קריאה ל-Render Deploy Hook
          response=$(curl -s -w "%{http_code}" -X POST "${{ secrets.RENDER_PRODUCTION_DEPLOY_HOOK }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"branch\": \"main\",
              \"commit\": \"${{ github.sha }}\",
              \"message\": \"Automated deployment from GitHub Actions\"
            }")
          
          http_code="${response: -3}"
          
          if [ "$http_code" -eq 200 ] || [ "$http_code" -eq 201 ]; then
            echo "✅ Render deployment triggered successfully"
          else
            echo "❌ Failed to trigger Render deployment (HTTP: $http_code)"
            exit 1
          fi
      
      - name: ⏳ Wait for Production Deployment
        run: |
          echo "⏳ Waiting for Render production deployment..."
          
          # המתנה מותאמת לגודל הפרויקט
          echo "⏳ Build and deployment typically takes 3-5 minutes on Render..."
          sleep 180  # 3 דקות
          
          # בדיקה שהשירות עלה
          for i in {1..20}; do
            if curl -f "https://code-keeper-bot.onrender.com/health" 2>/dev/null; then
              echo "✅ Production deployment successful!"
              break
            fi
            
            if [ $i -eq 20 ]; then
              echo "❌ Production deployment timeout"
              exit 1
            fi
            
            echo "⏳ Deployment check $i/20, waiting 30s..."
            sleep 30
          done
      
      - name: 📊 Production Health Check
        run: |
          echo "🏥 Running comprehensive production health checks..."
          
          production_url="https://code-keeper-bot.onrender.com"
          
          # בדיקות בסיסיות
          echo "🔍 Testing basic connectivity..."
          curl -f "$production_url/health" || exit 1
          
          # בדיקת response time
          echo "⚡ Testing response time..."
          response_time=$(curl -w "%{time_total}" -s -o /dev/null "$production_url/health")
          
          if (( $(echo "$response_time > 5.0" | bc -l) )); then
            echo "⚠️ Warning: Slow response time ($response_time seconds)"
          else
            echo "✅ Good response time: $response_time seconds"
          fi
          
          echo "✅ All production health checks passed!"
      
      - name: 🔄 Rollback on Failure
        if: failure()
        run: |
          echo "❌ Production deployment failed, attempting rollback..."
          
          # אם יש deploy hook לגרסה קודמת, נשתמש בו
          if [ -n "${{ secrets.RENDER_ROLLBACK_HOOK }}" ]; then
            curl -X POST "${{ secrets.RENDER_ROLLBACK_HOOK }}"
            echo "🔄 Rollback triggered"
          else
            echo "⚠️ No rollback hook configured"
          fi

  # ===================================
  # שלב 6: התראות
  # ===================================
#  notify:
#    name: 📢 Notifications
#    runs-on: ubuntu-latest
#    needs: [deploy-staging, deploy-production]
#    if: always()
#    
#    steps:
#      - name: 📱 Telegram Notification
#        if: always()
#        uses: appleboy/telegram-action@master
#        with:
#          to: ${{ secrets.TELEGRAM_CHAT_ID }}
#          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
#          message: |
#            🤖 **Code Keeper Bot Deployment**
#            
#            📋 **Workflow:** ${{ github.workflow }}
#            🌿 **Branch:** ${{ github.ref_name }}
#            👤 **Actor:** ${{ github.actor }}
#            💾 **Commit:** ${{ github.sha }}
#            
#            📊 **Results:**
#            • Code Quality: ${{ needs.code-quality.result }}
#            • Unit Tests: ${{ needs.unit-tests.result }}
#            • Docker Build: ${{ needs.build-docker.result }}
#            • Staging: ${{ needs.deploy-staging.result }}
#            • Production: ${{ needs.deploy-production.result }}
#            
#            🔗 **Details:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
#      
#      - name: 📧 Email Notification
#        if: failure()
#        uses: dawidd6/action-send-mail@v3
#        with:
#          server_address: ${{ secrets.SMTP_HOST }}
#          server_port: ${{ secrets.SMTP_PORT }}
#          username: ${{ secrets.SMTP_USER }}
#          password: ${{ secrets.SMTP_PASSWORD }}
#          subject: "❌ Code Keeper Bot Deployment Failed"
#          to: ${{ secrets.NOTIFICATION_EMAIL }}
#          from: "CI/CD <noreply@codekeeper.bot>"
#          html_body: |
#            <h2>❌ Deployment Failed</h2>
#            <p><strong>Repository:</strong> ${{ github.repository }}</p>
#            <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
#            <p><strong>Commit:</strong> ${{ github.sha }}</p>
#            <p><strong>Actor:</strong> ${{ github.actor }}</p>
#            <p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Details</a></p>

  # ===================================
  # שלב 7: ניקוי
  # ===================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    # needs: [notify]
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 🔑 Resolve Packages Token (PAT fallback)
        id: pkg-token
        shell: bash
        run: |
          if [ -n "${{ secrets.PACKAGES_PAT }}" ]; then
            echo "token=${{ secrets.PACKAGES_PAT }}" >> "$GITHUB_OUTPUT"
          else
            echo "token=${{ github.token }}" >> "$GITHUB_OUTPUT"
          fi
      - name: 🗑️ Delete Old Images
        uses: actions/delete-package-versions@v4
        env:
          GITHUB_TOKEN: ${{ steps.pkg-token.outputs.token }}
        with:
          owner: ${{ github.repository_owner }}
          package-name: ${{ github.event.repository.name }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
      
      - name: 📊 Collect Metrics
        run: |
          echo "📊 Collecting deployment metrics..."
          # כאן נוסיף איסוף מטריקות לצורכי ניטור

## ===================================
## Workflow נוסף: Security Scanning הועבר לקובץ נפרד
## ===================================

## ===================================
## Workflow נוסף: Performance Testing הועבר לקובץ נפרד
## ===================================

# ===================================
# הוראות הגדרה ב-GitHub + Render
# ===================================

# Secrets נדרשים ב-GitHub Repository Settings → Secrets:

# עבור בדיקות:
# - TEST_BOT_TOKEN: טוקן בוט לבדיקות
# - TEST_GITHUB_TOKEN: טוקן GitHub לבדיקות  
# - TEST_PASTEBIN_KEY: מפתח Pastebin לבדיקות

# עבור Render deployment:
# - RENDER_STAGING_DEPLOY_HOOK: Render deploy hook URL לstaging
# - RENDER_PRODUCTION_DEPLOY_HOOK: Render deploy hook URL לproduction
# - RENDER_ROLLBACK_HOOK: Render rollback hook (אופציונלי)

# עבור התראות:
# - TELEGRAM_CHAT_ID: ID צ'אט להתראות
# - TELEGRAM_BOT_TOKEN: טוקן בוט להתראות
# - NOTIFICATION_EMAIL: אימייל להתראות
# - SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASSWORD: הגדרות SMTP

# ===================================
# הגדרת Deploy Hooks ב-Render:
# ===================================

# 1. עבור לRender Dashboard
# 2. בחר את השירות שלך
# 3. עבור ל-Settings → Deploy Hooks
# 4. צור deploy hook חדש
# 5. העתק את ה-URL
# 6. הוסף כSecret ב-GitHub

# ===================================
# Environment Variables ב-Render:
# ===================================

# ב-Render Service Settings → Environment:
# BOT_TOKEN=your_telegram_bot_token
# MONGODB_URL=mongodb+srv://user:pass@cluster.mongodb.net/dbname
# GITHUB_TOKEN=your_github_token (אופציונלי)
# PASTEBIN_API_KEY=your_pastebin_key (אופציונלי)
# LOG_LEVEL=INFO
# SENTRY_DSN=your_sentry_dsn (אופציונלי)

# ===================================
# MongoDB Atlas Setup:
# ===================================

# 1. עבור ל-https://cloud.mongodb.com
# 2. צור חשבון ו-cluster חינמי
# 3. הגדר Network Access → Allow Access From Anywhere
# 4. צור DB User עם read/write permissions
# 5. קבל connection string ושים ב-MONGODB_URL

# ===================================
# Render Auto-Deploy Setup:
# ===================================

# Render יפרוס אוטומטית כל push ל-main
# לא צריך SSH keys או server management!
# פשוט push ל-GitHub והכל יקרה אוטומטית 🚀
