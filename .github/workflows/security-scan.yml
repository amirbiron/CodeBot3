name: "🔒 Security Scan"

on:
  pull_request:
    paths:
      - '**/Dockerfile'
      - '**/requirements*.txt'
      - '**/constraints*.txt'
  schedule:
    - cron: '0 2 1 * *'
  workflow_dispatch:

concurrency:
  group: security-scan-${{ github.ref }}
  cancel-in-progress: true

jobs:
  security-scan:
    name: "🛡️ Security Analysis"
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      security-events: write
      contents: read
      issues: write
    env:
      TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
    steps:
      - uses: actions/checkout@v4
      - name: "🔎 Debug Telegram notify config"
        run: |
          echo "Has TELEGRAM_BOT_TOKEN: $([ -n "${{ env.TELEGRAM_BOT_TOKEN }}" ] && echo yes || echo no)"
          echo "Has TELEGRAM_CHAT_ID: $([ -n "${{ env.TELEGRAM_CHAT_ID }}" ] && echo yes || echo no)"
      - name: "🧪 Trivy FS scan (repo)"
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,secret,config'
          output: trivy-fs.txt
        continue-on-error: true

      - name: "🛠️ Build app image (production)"
        run: |
          docker build --pull --no-cache -t app:scan --target production .

      - name: "🧪 Trivy Image scan (app:scan)"
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: 'app:scan'
          ignore-unfixed: true
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH'
          output: trivy-image.txt
        continue-on-error: true

      - name: "🔍 CodeQL Analysis"
        uses: github/codeql-action/init@v3
        with:
          languages: python
        continue-on-error: true

      - name: "🔍 Perform CodeQL Analysis"
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

      - name: "📣 Post scan summary as Issue (main, scheduled/manual only)"
        id: scan_summary
        uses: actions/github-script@v7
        if: github.ref == 'refs/heads/main' && (github.event_name == 'schedule' || github.event_name == 'workflow_dispatch')
        continue-on-error: true
        with:
          result-encoding: string
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const link = `https://github.com/${owner}/${repo}/security/code-scanning`;
            // Attach trivy summaries if present
            const fs = require('fs');
            let trivyFs = '';
            let trivyImg = '';
            try { trivyFs = fs.readFileSync('trivy-fs.txt', 'utf8'); } catch(e) {}
            try { trivyImg = fs.readFileSync('trivy-image.txt', 'utf8'); } catch(e) {}
            let alerts = [];
            let mdBody = '';
            let htmlBody = '';
            let defaultBranch = '';
            let latestCommit = null;
            try {
              const repoInfo = await github.rest.repos.get({ owner, repo });
              defaultBranch = repoInfo.data.default_branch || 'main';
              const commits = await github.rest.repos.listCommits({ owner, repo, sha: defaultBranch, per_page: 1 });
              latestCommit = commits.data && commits.data[0] ? commits.data[0] : null;
            } catch (e) {
              core.warning(`Failed to fetch default branch/commit: ${e.message}`);
            }
            try {
              alerts = await github.paginate(
                github.rest.codeScanning.listAlertsForRepo,
                { owner, repo, state: 'open', per_page: 100 }
              );
              const sevCounts = { critical: 0, high: 0, medium: 0, low: 0, warning: 0, error: 0, note: 0, unknown: 0 };
              for (const a of alerts) {
                const sev = (a.rule && (a.rule.security_severity_level || a.rule.severity)) || a.severity || 'unknown';
                const key = String(sev).toLowerCase();
                if (Object.prototype.hasOwnProperty.call(sevCounts, key)) sevCounts[key] += 1; else sevCounts.unknown += 1;
              }
              const total = alerts.length;
              const commitSha = latestCommit?.sha ? latestCommit.sha.substring(0, 7) : '—';
              const commitUrl = latestCommit?.html_url || '';
              const commitAuthor = latestCommit?.author?.login || latestCommit?.commit?.author?.name || '—';
              const commitDate = latestCommit?.commit?.author?.date ? new Date(latestCommit.commit.author.date).toISOString().slice(0,16).replace('T',' ') + 'Z' : '—';
              const commitMsg = latestCommit?.commit?.message?.split('\n')[0] || '';

              mdBody = [
                `🛡️ Security Scan Summary`,
                `\n\nRepository: ${owner}/${repo}`,
                `\nDefault branch: ${defaultBranch || '—'}`,
                commitUrl ? `\nLatest commit: [${commitSha}](${commitUrl}) by @${commitAuthor} on ${commitDate} — ${commitMsg}` : `\nLatest commit: ${commitSha} by @${commitAuthor} on ${commitDate} — ${commitMsg}`,
                `\n\nLink: [Code Scanning](${link})`,
                `\n\nOpen alerts summary:`,
                `\n- Critical: ${sevCounts.critical}`,
                `\n- High: ${sevCounts.high}`,
                `\n- Medium: ${sevCounts.medium}`,
                `\n- Low: ${sevCounts.low}`,
                `\n- Warning: ${sevCounts.warning}`,
                `\n- Error: ${sevCounts.error}`,
                `\n- Note: ${sevCounts.note}`,
                `\n- Unknown: ${sevCounts.unknown}`,
                `\n\nTotal: ${total}`,
                trivyFs ? `\n\n<details><summary>Trivy FS (CRITICAL/HIGH)</summary>\n\n\n\n\n\n${'```'}\n${trivyFs}\n${'```'}\n</details>` : '',
                trivyImg ? `\n\n<details><summary>Trivy Image python:3.11-alpine (CRITICAL/HIGH)</summary>\n\n${'```'}\n${trivyImg}\n${'```'}\n</details>` : ''
              ].join('');

              htmlBody = [
                `<b>🛡️ Security Scan Summary</b>`,
                `<br/><br/>Repository: <code>${owner}/${repo}</code>`,
                `<br/>Default branch: <code>${defaultBranch || '—'}</code>`,
                latestCommit ? `<br/>Latest commit: <a href="${commitUrl}"><code>${commitSha}</code></a> by <b>@${commitAuthor}</b> on ${commitDate} — ${commitMsg}` : '',
                `<br/><br/>Link: <a href="${link}">Code Scanning</a>`,
                `<br/><br/><b>Open alerts summary:</b>`,
                `<br/>• Critical: ${sevCounts.critical}`,
                `<br/>• High: ${sevCounts.high}`,
                `<br/>• Medium: ${sevCounts.medium}`,
                `<br/>• Low: ${sevCounts.low}`,
                `<br/>• Warning: ${sevCounts.warning}`,
                `<br/>• Error: ${sevCounts.error}`,
                `<br/>• Note: ${sevCounts.note}`,
                `<br/>• Unknown: ${sevCounts.unknown}`,
                `<br/><br/>Total: <b>${total}</b>`
              ].join('');
            } catch (err) {
              core.warning(`Failed to fetch Code Scanning alerts: ${err.message}`);
              mdBody = [
                `🛡️ Security Scan Summary`,
                `\n\nRepository: ${owner}/${repo}`,
                `\n\nLink: [Code Scanning](${link})`,
                `\n\nלא ניתן היה למשוך התראות דרך ה‑API. בדקו ידנית בלשונית Security.`
              ].join('');
              htmlBody = [
                `<b>🛡️ Security Scan Summary</b>`,
                `<br/><br/>Repository: <code>${owner}/${repo}</code>`,
                `<br/><br/>Link: <a href="${link}">Code Scanning</a>`,
                `<br/><br/>לא ניתן היה למשוך התראות דרך ה‑API. בדקו ידנית בלשונית Security.`
              ].join('');
            }
            const baseTitle = '🛡️ Security Scan Summary';
            // Upsert: update existing open issue with the base title (or create if missing)
            let targetIssue = null;
            try {
              const existing = await github.rest.issues.listForRepo({ owner, repo, state: 'open', per_page: 100, labels: undefined });
              targetIssue = (existing.data || []).find(iss => (iss.title || '') === baseTitle) || null;
            } catch (e) {
              core.warning(`Failed to list issues: ${e.message}`);
            }
            if (targetIssue) {
              await github.rest.issues.update({ owner, repo, issue_number: targetIssue.number, body: mdBody });
            } else {
              await github.rest.issues.create({ owner, repo, title: baseTitle, body: mdBody, labels: ['documentation','security','automated'] });
            }
            core.setOutput('html', htmlBody);
            core.setOutput('text', mdBody);
            return mdBody;

      - name: "📨 Notify Telegram"
        if: ${{ env.TELEGRAM_BOT_TOKEN != '' && env.TELEGRAM_CHAT_ID != '' && github.ref == 'refs/heads/main' && github.event_name == 'schedule' }}
        run: |
          printf '%s' "${{ steps.scan_summary.outputs.text }}" | head -c 3500 | \
          curl -sS -o /tmp/tg.json -w "%{http_code}" -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d "chat_id=${TELEGRAM_CHAT_ID}" \
            --data-urlencode "text@-" || true
