name: üìñ Build and Deploy Documentation

on:
  push:
    branches: [main, develop]
    paths:
      - '**.py'
      - 'docs/**'
      - 'requirements.txt'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [main]
    paths:
      - '**.py'
      - 'docs/**'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      deploy:
        description: 'Deploy to GitHub Pages'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  PYTHON_VERSION: '3.11'
  SPHINX_BUILD_DIR: docs/_build/html

jobs:
  build-docs:
    name: üî® Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git info in docs
    
    - name: üêç Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: üì¶ Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sphinx==7.4.7 sphinx-rtd-theme==2.0.0 sphinx-autodoc-typehints==1.25.3 sphinxcontrib-napoleon==0.7 sphinx-multiversion==0.2.4
        # Try to install project dependencies (may fail due to missing system deps)
        pip install -r requirements.txt 2>/dev/null || true
    
    - name: üîç Check documentation style
      continue-on-error: true
      run: |
        pip install pydocstyle
        pydocstyle --count --convention=google --add-ignore=D100,D104 || true
    
    - name: üî® Build docs (PR single-version)
      if: github.event_name == 'pull_request'
      run: |
        cd docs
        DISABLE_DB=1 sphinx-build -b html . _build/html --keep-going
      env:
        SPHINX_MOCK_IMPORTS: true
        BOT_TOKEN: dummy_token_for_docs
        MONGODB_URL: mongodb://localhost:27017/test

    - name: üî® Build docs (single-version for stability)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event_name == 'pull_request'
      run: |
        cd docs
        DISABLE_DB=1 sphinx-build -b html . _build/html --keep-going
    
    - name: üìä Generate documentation coverage report
      if: github.event_name == 'pull_request'
      continue-on-error: true
      run: |
        cd docs
        sphinx-build -b coverage . _build/coverage
        echo "### üìä Documentation Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        cat _build/coverage/python.txt >> $GITHUB_STEP_SUMMARY || echo "No coverage data available" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
    
    - name: üîó Check for broken links
      if: github.event_name == 'pull_request'
      continue-on-error: true
      run: |
        cd docs
        sphinx-build -b linkcheck . _build/linkcheck || true
        if [ -f "_build/linkcheck/output.txt" ]; then
          echo "### üîó Link Check Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          head -50 _build/linkcheck/output.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: üíæ Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-html
        path: ${{ env.SPHINX_BUILD_DIR }}
        retention-days: 7
    
    - name: üìù Generate documentation info
      run: |
        echo "### üìñ Documentation Build Info" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python**: ${{ env.PYTHON_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Sphinx**: $(sphinx-build --version 2>&1 | head -1)" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
        
        # Count documentation files
        echo "- **HTML Files**: $(find ${{ env.SPHINX_BUILD_DIR }} -name "*.html" | wc -l)" >> $GITHUB_STEP_SUMMARY
        echo "- **Total Size**: $(du -sh ${{ env.SPHINX_BUILD_DIR }} | cut -f1)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Documentation built successfully!**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚ö†Ô∏è Note: Some warnings may appear during build. This is normal for projects with external dependencies." >> $GITHUB_STEP_SUMMARY
    
    - name: üí¨ Comment on PR with preview link
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const artifactUrl = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
          
          // Check if we already commented
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('üìñ Documentation Preview')
          );
          
          const body = `## üìñ Documentation Preview
          
          The documentation has been built successfully! 
          
          - üì¶ [Download Documentation Artifacts](${artifactUrl})
          - üîç Check the workflow summary for coverage report
          - üìä Build completed at: ${new Date().toUTCString()}
          
          To view locally:
          1. Download the artifacts
          2. Extract the zip file
          3. Open \`index.html\` in your browser`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }

  deploy-docs:
    name: üöÄ Deploy to GitHub Pages
    needs: build-docs
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'release') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.deploy == 'true')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: üì• Download documentation artifact
      uses: actions/download-artifact@v4
      with:
        name: documentation-html
        path: public

    - name: ‚úÖ Verify public directory
      run: |
        if [ ! -d "public" ]; then
          echo "Directory ./public does not exist (artifact missing)."
          exit 1
        fi
    
    - name: üìÑ Setup GitHub Pages
      uses: actions/configure-pages@v4
    
    - name: üì¶ Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./public
    
    - name: üöÄ Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
    
    - name: ‚úÖ Deployment summary
      run: |
        echo "### üöÄ Documentation Deployed!" >> $GITHUB_STEP_SUMMARY
        echo "- **URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: github-pages" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployed at**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY

  notify-failure:
    name: üì¢ Notify on Failure
    needs: [build-docs]
    if: failure()
    runs-on: ubuntu-latest
    
    steps:
    - name: üì¢ Create issue for documentation failure
      if: github.ref == 'refs/heads/main'
      uses: actions/github-script@v7
      with:
        script: |
          const title = `üìñ Documentation Build Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `## ‚ùå Documentation Build Failed
          
          The documentation build failed on the main branch.
          
          **Details:**
          - Commit: ${context.sha}
          - Workflow: [${context.workflow}](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          - Time: ${new Date().toUTCString()}
          
          Please check the workflow logs and fix the documentation build.`;
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['documentation', 'bug', 'automated']
          });